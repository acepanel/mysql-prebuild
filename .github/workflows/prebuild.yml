name: MySQL Prebuilt Packages
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
concurrency:
  group: "prebuild-mysql"
  cancel-in-progress: true
jobs:
  build:
    name: ${{ matrix.mysql.version }} for ${{ matrix.os.name }} ${{ matrix.os.version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        mysql:
          - { channel: "percona_57", version: "5.7.44-53" }
          - { channel: "percona_80", version: "8.0.43-34" }
          - { channel: "percona_84", version: "8.4.6-6" }
        os:
          # Debian
          - { name: "debian", version: "12", image: "debian:12" }
          - { name: "debian", version: "13", image: "debian:13" }
          # Ubuntu
          - { name: "ubuntu", version: "22", image: "ubuntu:22.04" }
          - { name: "ubuntu", version: "24", image: "ubuntu:24.04" }
          # AlmaLinux
          - { name: "almalinux", version: "9", image: "almalinux:9" }
          - { name: "almalinux", version: "10", image: "almalinux:10" }
    container:
      image: ${{ matrix.os.image }}
      options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup container environment
        run: |
          if command -v apt-get >/dev/null 2>&1; then
            export DEBIAN_FRONTEND=noninteractive
            apt-get update -y
            apt-get install -y bash wget git make systemd
            apt-get install -y build-essential cmake doxygen graphviz bison libncurses5-dev libtirpc-dev libssl-dev pkg-config libsystemd-dev libldap2-dev libudev-dev libsasl2-dev libsasl2-modules-gssapi-mit patchelf libkrb5-dev zlib1g-dev libreadline-dev libcurl4-openssl-dev libatomic1 libquadmath0
            # Debian 13 单独安装 systemd-dev
            if [ "${{ matrix.os.name }}" = "debian" ] && [ "${{ matrix.os.version }}" = "13" ]; then
              apt-get install -y systemd-dev
            fi
          elif command -v dnf >/dev/null 2>&1; then
            dnf makecache
            dnf install -y dnf-plugins-core
            if [ "${{ matrix.os.version }}" = "8" ]; then
              dnf config-manager --set-enabled powertools
            else
              dnf config-manager --set-enabled crb
            fi
            dnf install -y epel-release
            dnf config-manager --set-enabled epel
            dnf install -y bash wget git make systemd
            dnf groupinstall "Development Tools" -y
            dnf install -y cmake doxygen graphviz bison ncurses-devel libtirpc-devel openssl-devel pkg-config systemd-devel openldap-devel libudev-devel cyrus-sasl-devel cyrus-sasl-scram patchelf rpcgen rpcsvc-proto-devel krb5-devel zlib-devel readline-devel libcurl-devel libatomic libquadmath-devel
          fi
      - name: Build MySQL
        run: |
          chmod +x build_mysql.sh
          ./build_mysql.sh "${{ matrix.mysql.channel }}" "${{ matrix.mysql.version }}"
      - name: Package MySQL
        id: package
        run: |
          ARCH=$(uname -m)
          OS_NAME="${{ matrix.os.name }}"
          OS_VERSION="${{ matrix.os.version }}"
          PACKAGE_NAME="percona-server-${{ matrix.mysql.version }}-${OS_NAME}${OS_VERSION}-${ARCH}"
          mv /opt/ace/server/mysql/percona-server-*.7z "${PACKAGE_NAME}.7z"
          echo "name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.name }}
          path: /opt/ace/server/mysql/${{ steps.package.outputs.name }}.7z
          compression-level: 0
          retention-days: 90
  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Prepare release assets
        run: |
          mkdir -p release
          find artifacts -name "*.7z" -exec cp {} release/ \;
          ls -la release/
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: "#${{ github.run_number }}"
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
